pipeline {
    agent any

    tools {
        python 'Python3'  // Name exactly as configured in Global Tool Configuration
    }

    environment {
        PIP = "pip3" // pip3 install
        PROJECT_DIR = "messaging_app/messaging_app"
        VENV_DIR = "venv"
        REPORTS_DIR = "reports"
        TESTS_DIR = "tests"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/Y-A-Dawit/alx-backend-python.git',
                    credentialsId: 'github-creds'
            }
        }

        stage('Prepare Project Structure') {
            steps {
                sh "mkdir -p ${PROJECT_DIR}/${REPORTS_DIR} ${PROJECT_DIR}/${TESTS_DIR}"
            }
        }

        stage('Set Up Python Environment') {
            steps {
                // ShiningPanda automatically wraps Python in a virtual environment
                // Using 'withPythonEnv' block
                withPythonEnv('Python3') {
                    sh """
                        pip install --upgrade pip
                        pip install -r ${PROJECT_DIR}/requirements.txt
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                withPythonEnv('Python3') {
                    sh """
                        pytest ${PROJECT_DIR} \
                            --maxfail=1 --disable-warnings -q \
                            --junitxml=${PROJECT_DIR}/${REPORTS_DIR}/pytest-report.xml \
                            --html=${PROJECT_DIR}/${REPORTS_DIR}/report.html --self-contained-html
                    """
                }
            }
            post {
                always {
                    publishHTML([
                        reportDir: "${PROJECT_DIR}/${REPORTS_DIR}",
                        reportFiles: "report.html",
                        reportName: "Pytest Report",
                        keepAll: true,
                        alwaysLinkToLastBuild: true,
                        allowMissing: true
                    ])
                }
            }
        }
    }

    post {
        success { echo 'Pipeline completed successfully ✅' }
        failure { echo 'Pipeline failed ❌ — check the Pytest Report' }
    }
}
